# This is taken from Glamourer's repo and changed a bunch. Notably, the testing
# workflow is merged into the release workflow.
name: Create Release

on:
  push:
    tags:
      - "*"

defaults:
  run:
    shell: pwsh

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Compute Version
        id: version
        run: |
          $ver = '${{ github.ref_name }}'
          echo "version=$ver" >> "$env:GITHUB_OUTPUT"
          echo "configuration=Release" >> "$env:GITHUB_OUTPUT"
          echo "build_dir=./ChatThree/bin/Release/net8.0-windows" >> "$env:GITHUB_OUTPUT"

      - name: Print Version
        run: |
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Configuration: ${{ steps.version.outputs.configuration }}"
          echo "Build Directory: ${{ steps.version.outputs.build_dir }}"

      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "8.x.x"

      - name: Restore dependencies
        run: dotnet restore

      - name: Download Dalamud
        run: |
          Invoke-WebRequest -Uri https://goatcorp.github.io/dalamud-distrib/stg/latest.zip -OutFile latest.zip
          Expand-Archive -Force latest.zip "$env:AppData\XIVLauncher\addon\Hooks\dev"
          rm latest.zip

      - name: Build
        run: |
          $ver = '${{ steps.version.outputs.version }}'
          $configuration = '${{ steps.version.outputs.configuration }}'
          Invoke-Expression 'dotnet build --no-restore --configuration $configuration --nologo -p:Version=$ver -p:FileVersion=$ver -p:AssemblyVersion=$ver'

      - name: Build Tree
        run: tree /F '${{ steps.version.outputs.build_dir }}'

      - name: Write Version Into Dalamud JSON
        run: |
          $ver = '${{ steps.version.outputs.version }}'
          $build_dir = '${{ steps.version.outputs.build_dir }}'

          if (Test-Path "${build_dir}/ChatThree") {
            Remove-Item -Recurse -Force "${build_dir}/ChatThree"
          }

          $path = "${build_dir}/ChatThree.json"
          $json = Get-Content -Raw $path | ConvertFrom-Json
          $json.AssemblyVersion = $ver
          $content = $json | ConvertTo-Json
          Set-Content -Path $path -Value $content

          echo "ChatThree.json:"
          Get-Content -Raw $path

      - name: Archive
        run: |
          $build_dir = '${{ steps.version.outputs.build_dir }}'
          Compress-Archive -Path "${build_dir}/*" -DestinationPath ChatThree.zip

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2.2.1
        with:
          path: |
            ${{ steps.version.outputs.build_dir }}/*

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Chat 3 ${{ github.ref }}
          draft: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ChatThree.zip
          asset_name: ChatThree.zip
          asset_content_type: application/zip

      - name: Write repo.json
        run: |
          $ref = '${{ github.ref_name }}'
          $path = './repo.json'
          $json = Get-Content -Raw $path | ConvertFrom-Json
          $json[0].AssemblyVersion = $ref
          $json[0].TestingAssemblyVersion = $ref
          $json[0].DownloadLinkInstall = $json.DownloadLinkInstall -replace '[^/]+/ChatThree.zip',"$ref/ChatThree.zip"
          $json[0].DownloadLinkUpdate = $json.DownloadLinkUpdate -replace '[^/]+/ChatThree.zip',"$ref/ChatThree.zip"
          $json[0].LastUpdate = ([DateTimeOffset](Get-Date)).ToUnixTimeSeconds()
          $content = $json | ConvertTo-Json -AsArray
          Set-Content -Path $path -Value $content

      - name: Commit repo.json
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git fetch origin main
          git branch -f main ${{ github.sha }}
          git checkout main
          git add repo.json
          git commit -m "[CI] Updating repo.json for ${{ github.ref_name }}" || true
          git push origin main
